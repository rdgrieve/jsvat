{"version":3,"sources":["jsvat.js"],"names":["jsvat","Result","vat","isValid","country","this","value","name","isoCode","short","codes","long","numeric","isInList","list","i","length","val","toUpperCase","isVatValidToRegexp","regexArr","regex","test","exports","blocked","allowed","countries","checkVAT","Error","cleanVAT","toString","replace","result","k","hasOwnProperty","rules","getCountry","isAllowed","isBlocked","regexpValidRes","exec","calcFn","austria","temp","total","charAt","multipliers","Math","floor","slice","belgium","bulgaria","_increase","from","to","incr","_increase2","expect","month","physical","substr","_isPhysicalPerson","foreigner","_isForeigner","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","additional","_isLegalEntities","j","lookup","_isIndividualType2","_isIndividualType1","denmark","estonia","europe","finland","france","substring","germany","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","checkDigit","_doubleCheckCalculation","extractDigit","l","alt","_doubleCheckCalculation12","med","extractDigit12","check","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","m_1","_check10DigitINN","total1","total2","m_2","m_3","expect2","_check12DigitINN","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict'\n\n  function Result(vat, isValid, country) {\n    this.value = vat || null\n    this.isValid = !!isValid\n\n    if (country) {\n      this.country = {\n        name: country.name,\n        isoCode: {\n          short: country.codes[0],\n          long: country.codes[1],\n          numeric: country.codes[2]\n        }\n      }\n    }\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function isValEqToCode(val, codes) {\n    return (val === codes[0] || val === codes[1] || val === codes[2])\n  }\n\n  function isInList(list, country) {\n    if (!list) return false\n\n    for (var i = 0; i < list.length; i++) {\n      var val = list[i].toUpperCase()\n      if (val === country.name.toUpperCase()) return true\n      if (isValEqToCode(val, country.codes)) return true\n    }\n\n    return false\n  }\n\n  function isBlocked(country, blocked, allowed) {\n    var isBlocked = isInList(blocked, country)\n    if (isBlocked) return true\n    var isAllowed = isInList(allowed, country)\n    return allowed.length > 0 && !isAllowed\n  }\n\n  function getCountry(vat, countries) {\n    for (var k in countries) {\n      if (countries.hasOwnProperty(k)) {\n        var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex)\n        if (regexpValidRes.isValid) return countries[k]\n      }\n    }\n\n    return null\n  }\n\n  function isVatValidToRegexp(vat, regexArr) {\n    for (var i = 0; i < regexArr.length; i++) {\n      var regex = regexArr[i]\n      var isValid = regex.test(vat)\n      if (isValid) return {\n        isValid: true,\n        regex: regex\n      }\n    }\n\n    return {\n      isValid: false\n    }\n  }\n\n  function isVatMathValid(vat, country) {\n    return country.calcFn(vat)\n  }\n\n  function isVatValid(vat, country) {\n    var regexpValidRes = isVatValidToRegexp(vat, country.rules.regex)\n    if (!regexpValidRes.isValid) return false\n    return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country)\n  }\n\n  var exports = {\n    blocked: [],\n    allowed: [],\n    countries: {},\n    checkVAT: function(vat) {\n      if (!vat) throw new Error('VAT should be specified')\n      var cleanVAT = removeExtraChars(vat)\n      var result = new Result(cleanVAT)\n\n      var country = getCountry(cleanVAT, this.countries)\n      if (!country) return result\n      if (isBlocked(country, this.blocked, this.allowed)) return new Result(cleanVAT, false, country)\n\n      var isValid = isVatValid(cleanVAT, country)\n      if (isValid) return new Result(cleanVAT, isValid, country)\n\n      return result\n    }\n  }\n\n\n  // eslint-disable-next-line no-undef\n  exports.countries.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function(vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr)\n        }\n        return value\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i]\n        }\n        return value\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total\n        var temp = 0\n        var expect = +vat.slice(8)\n\n        temp = _increase(temp, vat, 0, 8, 1)\n\n        total = temp % 11\n        if (total !== 10) {\n          return total === expect\n        }\n\n        temp = _increase(0, vat, 0, 8, 3)\n\n        total = temp % 11\n        if (total === 10) total = 0\n\n        return total === expect\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4)\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n            // Establish check digit.\n            total = total % 11\n            if (total === 10) total = 0\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true\n          }\n        }\n\n        return false\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) return false\n        if (total === 11) total = 0\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1)\n        return total === expect\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat)\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function(vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType1(vat, rules) {\n        if (rules.additional[1].test(vat)) {\n          var temp = +vat.slice(0, 2)\n\n          if (temp > 62) {\n            return false;\n          } else {\n            return true;\n          }\n\n\n        }\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Convert calculated check digit according to a lookup table\n          var expect = +vat.slice(8, 9)\n          return rules.lookup[total - 1] === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n          var expect = +vat % 11 === 0\n          return !!(temp % 11 === 0 && expect)\n        }\n\n        return false\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true\n      if (_isIndividualType2(vat, this.rules)) return true\n      if (_isIndividualType3(vat, this.rules)) return true\n      if (_isIndividualType1(vat, this.rules)) return true\n\n      return false\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'], // TODO (S.Panfilov) that's not a real codes\n    calcFn: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function(vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key]\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i)\n          }\n        }\n\n        return total\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1)\n        }\n        return total\n      }\n\n      function checkDigit(total) {\n        total = total % 11\n        if (total === 10) {\n          total = 0\n        }\n\n        return total\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9)\n          return total === expect\n        }\n        return false\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k)\n        }\n        return total\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l)\n          }\n        }\n\n        return total\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12)\n          return total === expect\n        }\n\n        return false\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function(vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i]\n          }\n\n          total = total % 11\n          if (total > 9) {\n            total = total % 10\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0\n        var total2 = 0\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n          }\n\n          total1 = total1 % 11\n\n          if (total1 > 9) {\n            total1 = total1 % 10\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n          }\n\n          total2 = total2 % 11\n          if (total2 > 9) {\n            total2 = total2 % 10\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11))\n          var expect2 = (total2 === +vat.slice(11, 12))\n          return (expect) && (expect2)\n        }\n\n        return false\n      }\n\n      // See http://russianpartner.biz/test_inn.html for algorithm\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports\n\n  return exports\n\n})()"]}